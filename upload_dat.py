'''
Created on Apr 1, 2016

@author: kartik
'''

import numpy as np
import urllib
from SVM.SVM import SVM
from Decision_Tree.Decision_Tree import Decision_Tree
import time 
def main():

    # url with dataset
    url = "http://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data"
    # download the file
    raw_data = urllib.urlopen(url)
    # load the CSV file as a numpy matrix
    dataset = np.genfromtxt(raw_data,delimiter=",",dtype="i10,i2,i2,i2,i2,i2,i2,i2,i2,i2,i2",names=('id',
                                                                     'clump thickness',
                                                                     'uniformity of cell size',
                                                                     'uniformity of cell shape',
                                                                     'Marginal Adhesion',
                                                                     'Single Epithelial Cell Size',
                                                                     'Bare Nuclei',
                                                                     'Bland Chromatin',
                                                                     'Normal Nucleoli',
                                                                     'Mitoses',
                                                                     'Output'))
    # separate the data from the target attributes
    #print(dataset)
    data=dataset.tolist()
    output_list=[]
    alpha_list=[]
    for set in data:
        if set[10]==2:
            output_list.append(1)
        elif set[10]==4:
            output_list.append(-1)
        alpha_list.append(0)
    #splitting data into test and train data
    #initially splitting it into half
    training_index=len(data)/2
    svm =SVM(7,pow(10,-5),10,alpha_list,output_list, training_index, data)
    value=svm.error_function(44,2)
    print(value)
    start=time.time()
    #svm.Lagrange_multiplier()
    #print(svm.b)
    #print(svm.alpha_list)
    #svm.alpha_list=[6.999999999999999, 7.0, 7.0, 2.38421477572419, 7.000000000000001, 7.0, 1.1102230246251565e-16, 7.0, 0.0, 7.0, 2.220446049250313e-16, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.999999999999999, 7.0, 7.0, 7.0, 7.0, 6.999999999999999, 7.0, 6.999999999999999, 7.0, 7.0, 7.0, 7.000000000000001, 7.0, 5.88326504680535, 6.999999999999999, 7.0, 7.0, 7.0, 6.999999999999999, 7.0, 0.0, 7.000000000000001, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.000000000000001, 6.999999999999999, 6.999999999999999, 7.0, 7.0, 7.0, 6.999999999999999, 7.000000000000001, 7.0, 6.999999999999999, 7.0, 7.000000000000001, 7.000000000000001, 7.000000000000001, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.000000000000001, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.000000000000001, 7.0, 7.0, 7.0, 2.376277760863852, 7.0, 7.0, 2.7755575615628914e-16, 7.000000000000001, 6.999999999999999, 7.0, 7.0, 7.0, 7.0, 7.0, 7.000000000000001, 7.0, 7.0, 7.000000000000001, 7.0, 7.0, 7.0, 7.000000000000001, 6.999999999999999, 6.999999999999999, 7.0, 7.0, 7.0, 7.0, 7.0, 6.999999999999999, 6.999999999999999, 7.000000000000001, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 0.0, 7.0, 7.0, 7.000000000000001, 7.0, 7.0, 7.0, 7.000000000000001, 7.0, 7.000000000000001, 7.0, 7.0, 6.999999999999999, 7.000000000000001, 0.0, 7.0, 7.000000000000001, 6.999999999999999, 7.0, 7.0, 6.999999999999999, 7.0, 6.999999999999999, 7.0, -5.551115123125783e-17, 7.0, 7.000000000000001, 7.0, 0.0, 7.0, 7.000000000000001, 7.000000000000001, 7.000000000000001, 6.999999999999999, 7.0, 0.10737654694659426, 7.000000000000001, 7.0, 6.237129402874892, 1.5084232458852547, 7.0, 7.0, 7.0, 7.000000000000001, 7.000000000000001, 7.0, 7.0, 7.0, 0.0, 1.7567977006874491, 7.0, 7.0, 7.0, 7.0, 7.000000000000001, 7.0, 6.999999999999999, 7.0, 7.0, 7.0, 7.000000000000001, 7.0, 7.000000000000001, 6.999999999999999, 7.0, 0.0, 1.466328595880455, 1.6039993364105116, 7.0, 6.999999999999999, 7.0, 7.000000000000001, 7.0, 7.0, 7.000000000000001, 6.999999999999999, 7.0, 7.000000000000001, 7.0, 7.0, 7.0, 4.932478234638465, 7.000000000000001, 1.6759757799823851, 7.0, 7.000000000000001, 7.000000000000001, 7.0, 7.000000000000001, 7.0, 7.0, 7.0, 0.3310379230987128, 0.0, 3.838307365892917, 7.0, 7.000000000000001, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.000000000000001, 7.0, 7.000000000000001, 7.0, 7.0, 7.0, 7.0, 7.000000000000001, 7.0, 3.151808902288558, 6.999999999999999, 7.0, 7.0, 7.0, 7.0, 7.0, 6.999999999999999, 7.000000000000001, 7.0, 6.999999999999999, 7.0, 7.0, 7.0, 7.0, 0.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.000000000000001, 7.0, 6.999999999999999, 6.802707432471033, 6.999999999999999, 7.0, 7.000000000000001, 7.0, 7.0, 7.0, 0.8840443087199137, 7.000000000000001, 7.0, 6.999999999999999, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.000000000000001, 6.999999999999999, 6.999999999999999, 7.0, 6.999999999999999, 7.0, 6.999999999999999, 6.999999999999999, 7.0, 6.999999999999999, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.999999999999999, 7.0, 7.000000000000001, 0.20221519854016978, 7.0, 7.0, 7.0, 6.4275893099432055, 7.0, 7.0, 7.0, 1.7469146947191188, 7.0, 7.0, 7.0, 7.000000000000001, 7.0, 7.0, 7.0, 7.000000000000001, 7.0, 7.000000000000001, 0.0, 7.0, 3.6578846998964956, 7.0, 4.828205686989225, 5.551115123125783e-17, 7.0, 7.0, 6.999999999999999, 6.999999999999999, 7.0, 6.999999999999999, 7.000000000000001, 7.0, 7.0, 6.999999999999999, 7.0, 7.0, 6.999999999999999, 7.000000000000001, 7.0, 7.0, 7.0, 7.000000000000001, 7.0, 6.999999999999999, 1.0691540272800824, 7.0, 7.0, 4.440892098500626e-16, 7.0, 7.0, 7.000000000000001, 7.0, 7.0, 7.000000000000001, 4.157359600879229, 7.0, 1.2635216633847475, 2.4208770965690705, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    #svm.b=23.2884646193
    #svm.predict_test_data()
    end=float(time.time())
    print ("Time taken by SVM classifier is:")
    print(str(end-start)+"s")
    #formatting the data
    data1=[list(row) for row in data]
    for row in data1 :
        if row[10]==2:
            row[10]=1
        else:
            row[10]=-1
    data2=[[1000025, 5, 1, 1, 1, 2, 1, 3, 1, 1, 1], [1002945, 5, 4, 4, 5, 7, 10, 3, 2, 1, 1], [1015425, 3, 1, 1, 1, 2, 2, 3, 1, 1, -1]]
    start=time.time()
    deci=Decision_Tree(data1,training_index)
    root_node=deci.buildtree([row for index,row in enumerate(data1) if index< training_index ])
    deci.measure_accuracy(root_node)
    end=float(time.time())
    print ("Time taken by decision tree classifier is:")
    print(str(end-start)+"s")
    #deci.display_tree(root_node)
    
main()
